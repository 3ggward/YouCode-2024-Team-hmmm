mainland_mean
merc_sample <- data.frame(index = sample(mercury$Mercury, 120))
sample_mean <- mean(merc_sample$index)
sample_mean
island_sample <- data.frame(index = sample(island$Mercury, 40))
iqaluit <- data.frame(index = sample(Iqaluit$Mercury, 40))
iqaluit_sample_mean <- mean(iqaluit_sample$index)
iqaluit_sample <- data.frame(index = sample(Iqaluit$Mercury, 40))
iqaluit_sample_mean <- mean(iqaluit_sample$index)
iqaluit_sample_mean
mainland_sample <- data.frame(index = sample(mainland$Mercury, 40))
mainland_sample_mean <- mean(mainland_sample$index)
mainland_sample_mean
bind_sample <- rbind(island_sample, iqaluit_sample, mainland_sample)
bind_sample
head(bind_sample)
mean(bind_sample$index)
island_sample_mean
mercury <- read.table("STAT_200_labs/Mercury.txt", header = TRUE)
head(mercury)
pop_mean <- mean(mercury$Mercury)
island <- subset(mercury, Region == "Island")
island_mean <- mean(island$Mercury)
Iqaluit <- subset(mercury, Region == "Iqaluit")
Iqaluit_mean <- mean(Iqaluit$Mercury)
mainland <- subset(mercury, Region == "Mainland")
mainland_mean <- mean(mainland$Mercury)
pop_mean
Iqaluit_mean
mainland_mean
merc_sample <- data.frame(index = sample(mercury$Mercury, 120))
sample_mean <- mean(merc_sample$index)
sample_mean
island_sample <- data.frame(index = sample(island$Mercury, 40))
island_sample_mean <- mean(island_sample$index)
island_sample_mean
iqaluit_sample <- data.frame(index = sample(Iqaluit$Mercury, 40))
iqaluit_sample_mean <- mean(iqaluit_sample$index)
iqaluit_sample_mean
mainland_sample <- data.frame(index = sample(mainland$Mercury, 40))
mainland_sample_mean <- mean(mainland_sample$index)
mainland_sample_mean
bind_sample <- rbind(island_sample, iqaluit_sample, mainland_sample)
head(bind_sample)
mean(bind_sample$index)
island_sample_mean
sample_mean
mean(bind_sample$index)
pop_size <- nrow(mercury)
pop_size
mercury <- read.table("STAT_200_labs/Mercury.txt", header = TRUE)
head(mercury)
pop_mean <- mean(mercury$Mercury)
island <- subset(mercury, Region == "Island")
island_mean <- mean(island$Mercury)
Iqaluit <- subset(mercury, Region == "Iqaluit")
Iqaluit_mean <- mean(Iqaluit$Mercury)
mainland <- subset(mercury, Region == "Mainland")
mainland_mean <- mean(mainland$Mercury)
pop_mean
Iqaluit_mean
mainland_mean
merc_sample <- data.frame(index = sample(mercury$Mercury, 120))
sample_mean <- mean(merc_sample$index)
sample_mean
island_sample <- data.frame(index = sample(island$Mercury, 40))
island_sample_mean <- mean(island_sample$index)
island_sample_mean
iqaluit_sample <- data.frame(index = sample(Iqaluit$Mercury, 40))
iqaluit_sample_mean <- mean(iqaluit_sample$index)
iqaluit_sample_mean
mainland_sample <- data.frame(index = sample(mainland$Mercury, 40))
mainland_sample_mean <- mean(mainland_sample$index)
mainland_sample_mean
bind_sample <- rbind(island_sample, iqaluit_sample, mainland_sample)
head(bind_sample)
mean(bind_sample$index)
pop_size <- nrow(mercury)
island_size <- nrow(island)
iqaluit_size <- nrow(Iqaluit)
mainland_size <- nrow(mainland)
isl_prop <- island_size/pop_size
iq_prop <- iqaluit_size/pop_size
ma_prop <- mainland_size/pop_size
isl_prop * 120
iq_prop * 120
isl_prop * 120
iq_prop * 120
ma_prop * 120
mercury <- read.table("STAT_200_labs/Mercury.txt", header = TRUE)
head(mercury)
pop_mean <- mean(mercury$Mercury)
island <- subset(mercury, Region == "Island")
island_mean <- mean(island$Mercury)
Iqaluit <- subset(mercury, Region == "Iqaluit")
Iqaluit_mean <- mean(Iqaluit$Mercury)
mainland <- subset(mercury, Region == "Mainland")
mainland_mean <- mean(mainland$Mercury)
pop_mean
Iqaluit_mean
mainland_mean
merc_sample <- data.frame(index = sample(mercury$Mercury, 120))
sample_mean <- mean(merc_sample$index)
sample_mean
island_sample <- data.frame(index = sample(island$Mercury, 40))
island_sample_mean <- mean(island_sample$index)
island_sample_mean
iqaluit_sample <- data.frame(index = sample(Iqaluit$Mercury, 40))
iqaluit_sample_mean <- mean(iqaluit_sample$index)
iqaluit_sample_mean
mainland_sample <- data.frame(index = sample(mainland$Mercury, 40))
mainland_sample_mean <- mean(mainland_sample$index)
mainland_sample_mean
bind_sample <- rbind(island_sample, iqaluit_sample, mainland_sample)
head(bind_sample)
mean(bind_sample$index)
pop_size <- nrow(mercury)
island_size <- nrow(island)
iqaluit_size <- nrow(Iqaluit)
mainland_size <- nrow(mainland)
isl_prop <- island_size/pop_size
iq_prop <- iqaluit_size/pop_size
ma_prop <- mainland_size/pop_size
island_sample <- data.frame(index = sample(island$Mercury, 10))
island_sample_mean <- mean(island_sample$index)
island_sample_mean
iqaluit_sample <- data.frame(index = sample(Iqaluit$Mercury, 25))
iqaluit_sample_mean <- mean(iqaluit_sample$index)
iqaluit_sample_mean
mainland_sample <- data.frame(index = sample(mainland$Mercury, 85))
mainland_sample_mean <- mean(mainland_sample$index)
mainland_sample_mean
bind_sample <- rbind(island_sample, iqaluit_sample, mainland_sample)
head(bind_sample)
mean(bind_sample$index)
mean(island_sample$index)
mean(iqaluit_sample$index)
mean(mainland_sample$index)
.libPaths()
install.packages('tidymodels')
library(readr)
install.packages('psych')
install.packages('GGally')
.libPaths()
sam_50 <- rnorm(n = 50, mean = 15, sd = 3)
sam_50
sd(sam_50)
var(sam_50)
3.5^2
?rep_sample_n
head(sam_50)
matrix(rnorm(1000*50, mean = 0, sd = 1), ncol = 50)
head(ls)
library(tidyverse)
sam_50 <- rnorm(n = 50, mean = 15, sd = 3)
sam_50
head(sam_50)
ls <- matrix(rnorm(1000*50, mean = 0, sd = 1), ncol = 50)
new50 <- tidy(sam_50)
new50 <- tibble(sam_50)
head(new50)
sam_50
new_50
new50
head(new50)
new50 <- tibble(sam_50) |>
rep_sample_n(n = 1000, size = 50, replace = TRUE)
head(new50)
head(new50)
new50
new50 <- tibble(sam_50) |>
rep_sample_n(n = 1000, size = 50, replace = TRUE)
new50 <- tibble(sam_50) |>
rep_sample_n(n = 1000, size = 50, replace = TRUE)
new50 <- within(ls, {mean <- rowMeans(ls[,1:50])})
new50 <- within(ls, {mean <- rowMeans(ls[,1:50])
sd <- apply(ls[,1:50], 1, sd)})
sam_50 <- rnorm(n = 50, mean = 15, sd = 3)
sam_50
head(sam_50)
ls <- matrix(rnorm(1000*50, mean = 0, sd = 1), ncol = 50)
new50 <- within(ls, {mean <- rowMeans(ls[,1:50])
sd <- apply(ls[,1:50], 1, sd)})
ls
ls <- matrix(rnorm(1000*50, mean = 15, sd = 3), ncol = 50)
ls
nrow(ls)
new50 <- within(ls, {mean <- rowMeans(ls[,1:50])
sd <- apply(ls[,1:50], 1, sd)})
qnorm(0.025)
adder <- function(x, y, t) {
if (t == TRUE) {
x + y
} else {
0
}
}
adder(1, 2, TRUE)
adder(1, 2, FALSE)
test_boxplot_data <- data.frame("fatalities" = c(0, 0, 1, 1, 2, 2, 5, 10, 15),
"magnitude" = c(1, 2, 3, 4, 5, 6, 7, 8, 9))
test_boxplot <- boxplot_viz(test_boxplot_data, fatalities) + labs(x = "Fatalities",
title = "Boxplot of Fatalities")
library(ggplot2)
boxplot_viz <- function(data_frame, col) {
if (!is.data.frame(data_frame)) {
stop("`data_frame` should be a data frame or a data frame extension")}
if (nrow(data_frame) == 0) {
stop("'data_frame' should not be empty")
}
# if (!(col %in% colnames(data_frame))) {
#     stop("'col' should be a column name in the data frame")
# }
options(repr.plot.width = 7, repr.plot.height = 7)
ggplot2::ggplot(data = data_frame, ggplot2::aes(y = {{ col }})) +
ggplot2::geom_boxplot() +
ggplot2::theme(text = ggplot2::element_text(size = 14))
}
test_boxplot_data <- data.frame("fatalities" = c(0, 0, 1, 1, 2, 2, 5, 10, 15),
"magnitude" = c(1, 2, 3, 4, 5, 6, 7, 8, 9))
test_boxplot <- boxplot_viz(test_boxplot_data, fatalities) + labs(x = "Fatalities",
title = "Boxplot of Fatalities")
test_boxplot
library(ggplot2)
boxplot_viz <- function(data_frame, col) {
if (!is.data.frame(data_frame)) {
stop("`data_frame` should be a data frame or a data frame extension")}
if (nrow(data_frame) == 0) {
stop("'data_frame' should not be empty")
}
if (!(col %in% colnames(data_frame))) {
stop("'col' should be a column name in the data frame")
}
options(repr.plot.width = 7, repr.plot.height = 7)
ggplot2::ggplot(data = data_frame, ggplot2::aes(y = {{ col }})) +
ggplot2::geom_boxplot() +
ggplot2::theme(text = ggplot2::element_text(size = 14))
}
test_boxplot_data <- data.frame("fatalities" = c(0, 0, 1, 1, 2, 2, 5, 10, 15),
"magnitude" = c(1, 2, 3, 4, 5, 6, 7, 8, 9))
test_boxplot <- boxplot_viz(test_boxplot_data, fatalities) + labs(x = "Fatalities",
title = "Boxplot of Fatalities")
test_boxplot_data <- data.frame("fatalities" = c(0, 0, 1, 1, 2, 2, 5, 10, 15),
"magnitude" = c(1, 2, 3, 4, 5, 6, 7, 8, 9))
test_boxplot_data
colnames(test_boxplot_data)
"fatalities" %in% colnames(test_boxplot_data)
col = {{ fatalities }}
# library(ggplot2)
#
# boxplot_viz <- function(data_frame, col) {
#   if (!is.data.frame(data_frame)) {
#     stop("`data_frame` should be a data frame or a data frame extension")}
#
#   if (nrow(data_frame) == 0) {
#     stop("'data_frame' should not be empty")
#   }
#
#   if (!(col %in% colnames(data_frame))) {
#       stop("'col' should be a column name in the data frame")
#   }
#
#   options(repr.plot.width = 7, repr.plot.height = 7)
#
#   ggplot2::ggplot(data = data_frame, ggplot2::aes(y = {{ col }})) +
#     ggplot2::geom_boxplot() +
#     ggplot2::theme(text = ggplot2::element_text(size = 14))
# }
#
#
# test_boxplot_data <- data.frame("fatalities" = c(0, 0, 1, 1, 2, 2, 5, 10, 15),
#                                 "magnitude" = c(1, 2, 3, 4, 5, 6, 7, 8, 9))
#
# test_boxplot <- boxplot_viz(test_boxplot_data, fatalities) + labs(x = "Fatalities",
#                                                                   title = "Boxplot of Fatalities")
# test_boxplot
library(ggplot2)
boxplot_viz <- function(data_frame, col) {
if (!is.data.frame(data_frame)) {
stop("`data_frame` should be a data frame or a data frame extension")}
if (nrow(data_frame) == 0) {
stop("'data_frame' should not be empty")
}
if (!({{ col }} %in% colnames(data_frame))) {
stop("'col' should be a column name in the data frame")
}
options(repr.plot.width = 7, repr.plot.height = 7)
ggplot2::ggplot(data = data_frame, ggplot2::aes(y = {{ col }})) +
ggplot2::geom_boxplot() +
ggplot2::theme(text = ggplot2::element_text(size = 14))
}
test_boxplot_data <- data.frame("fatalities" = c(0, 0, 1, 1, 2, 2, 5, 10, 15),
"magnitude" = c(1, 2, 3, 4, 5, 6, 7, 8, 9))
test_boxplot <- boxplot_viz(test_boxplot_data, fatalities) + labs(x = "Fatalities",
title = "Boxplot of Fatalities")
head(troutPCB)
if (!({{ col }} %in% colnames(data_frame))) {
stop("'col' should be a column name in the data frame")
}
library(ggplot2)
boxplot_viz <- function(data_frame, col) {
if (!is.data.frame(data_frame)) {
stop("`data_frame` should be a data frame or a data frame extension")}
if (nrow(data_frame) == 0) {
stop("'data_frame' should not be empty")
}
# if (!({{ col }} %in% colnames(data_frame))) {
#     stop("'col' should be a column name in the data frame")
# }
options(repr.plot.width = 7, repr.plot.height = 7)
ggplot2::ggplot(data = data_frame, ggplot2::aes(y = {{ col }})) +
ggplot2::geom_boxplot() +
ggplot2::theme(text = ggplot2::element_text(size = 14))
}
test_boxplot_data <- data.frame("fatalities" = c(0, 0, 1, 1, 2, 2, 5, 10, 15),
"magnitude" = c(1, 2, 3, 4, 5, 6, 7, 8, 9))
test_boxplot <- boxplot_viz(test_boxplot_data, fatalities) + labs(x = "Fatalities",
title = "Boxplot of Fatalities")
test_boxplot
# test_boxplot_data <- data.frame("fatalities" = c(0, 0, 1, 1, 2, 2, 5, 10, 15),
#                                 "magnitude" = c(1, 2, 3, 4, 5, 6, 7, 8, 9))
# test_boxplot_data
#
# colnames(test_boxplot_data)
#
# col = {{ fatalities }}
boxplot_viz(troutPCB, PCB)
library(ggplot2)
boxplot_viz <- function(data_frame, col) {
if (!is.data.frame(data_frame)) {
stop("`data_frame` should be a data frame or a data frame extension")}
if (nrow(data_frame) == 0) {
stop("'data_frame' should not be empty")
}
if (!(deparse(substitute(col)) %in% colnames(data_frame))) {
stop("'col' should be a column name in the data frame")
}
options(repr.plot.width = 7, repr.plot.height = 7)
ggplot2::ggplot(data = data_frame, ggplot2::aes(y = {{ col }})) +
ggplot2::geom_boxplot() +
ggplot2::theme(text = ggplot2::element_text(size = 14))
}
test_boxplot_data <- data.frame("fatalities" = c(0, 0, 1, 1, 2, 2, 5, 10, 15),
"magnitude" = c(1, 2, 3, 4, 5, 6, 7, 8, 9))
test_boxplot <- boxplot_viz(test_boxplot_data, fatalities) + labs(x = "Fatalities",
title = "Boxplot of Fatalities")
test_boxplot
# test_boxplot_data <- data.frame("fatalities" = c(0, 0, 1, 1, 2, 2, 5, 10, 15),
#                                 "magnitude" = c(1, 2, 3, 4, 5, 6, 7, 8, 9))
# test_boxplot_data
#
# colnames(test_boxplot_data)
#
# col = {{ fatalities }}
boxplot_viz(troutPCB, PC)
boxplot_viz(troutPCB, PCB)
boxplot_viz(troutPCB, age)
boxplot_viz(troutPCB, Age)
library(ggplot2)
library(ggplot2)
test_fun <- function(data, var1, var2, truth) {
ggplot(data, aes(x = var1, y = var2)) +
geom_point(alpha = 0.6)
}
test_fun(troutPCB, Age, PCB, TRUE)
head(troutPCB)
library(ggplot2)
test_fun <- function(data, var1, var2, truth) {
ggplot(data, aes(x = var1, y = var2)) +
geom_point(alpha = 0.6)
library(ggplot2)
test_fun <- function(data, var1, var2, truth) {
ggplot(data, aes(x = var1, y = var2)) +
geom_point(alpha = 0.6)
test_fun(troutPCB, Age, PCB, TRUE)
test_fun(troutPCB, Age, PCB, TRUE)
library(ggplot2)
test_fun <- function(data, var1, var2, truth) {
ggplot(data, aes(x = var1, y = var2)) +
geom_point(alpha = 0.6)
test_fun(troutPCB, Age, PCB, TRUE)
library(ggplot2)
test_fun <- function(data, var1, var2, truth) {
ggplot(data, aes(x = {{var1}}, y = {{var2}})) +
geom_point(alpha = 0.6)
}
test_fun(troutPCB, Age, PCB, TRUE)
m
mm
head(troutPCB)
test_fun <- function(data, var1, var2, truth) {
ggplot(data, aes(x = {{var1}}, y = {{var2}})) +
geom_point(alpha = 0.6)
}
library(ggplot2)
test_fun <- function(data, var1, var2, truth) {
ggplot2::ggplot(data = data,
ggplot2::aes(x = {{ x_col }}, y = {{ y_col }})) +
ggplot2::geom_point(alpha = 0.4) +
ggplot2::theme(text = ggplot2::element_text(size = 14), plot.title = ggplot2::element_text(hjust = 0.5))
}
head(troutPCB)
?pnorm
std <- sqrt((0.42 * (1 - 0.42)) / 200)
std
pnorm(0.46, mean = 0.42, sd = std)
pnorm(0.42, mean = 0.46, sd = std)
std <- sqrt((0.51 * (1 - 0.51)) / 100)
std
pnorm(0.51, mean = 0.51, sd = std)
pnorm(0.41, mean = 0.51, sd = std)
qnorm(99.7)
qnorm(0.997)
qnorm(0.68)
100-68
/2
32/2
qnorm(0.16)
qnorm(0.0015)
100-99
qnorm(0.005)
zstar <- qnorm(0.005)
zstar
std <- 0.47 / sqrt(26)
2.35 + zstar * std
2.35 - zstar * std
setwd("C:/Users/xprai/OneDrive/Documents/GPS_Coords")
library(XML)
parsed_gpx <- htmlTreeParse(file = "Capilano_Canyon.gpx",
useInternalNodes = TRUE)
parsed_gpx <- htmlTreeParse(file = "Capilano_Canyon.gpx")
install.packages("gpx")
library(gpx)
capilano <- read_gpx("Capilano_Canyon.gpx")
head(capilano)
tracks <- capilano$tracks
head(tracks)
tracks <- capilano$tracks
tracks
tracks$Latitude
is.data.frame(tracks)
class(tracks)
tracks[1]
tracks <- capilano[1]
tracks
capilano
tracks <- capilano$tracks
tracks
tracks[1]
tracks[2]
track <- tracks[1]
class(track)
tracks[1]
tracks <- as.data.frame(capilano$tracks)
head(tracks)
head(lats)
lats <- tracks$Latitude
longs <- tracks$Longitude
head(lats)
arrayish <- array(c(lats, longs))
arrayish
?dim
?dim
?array
df <- data.frame(lats, longs)
df
arrayish <- array(c(lats), c(longs))
arrayish <- array(c(lats, longs))
arrayish
head(df)
unlist(df)
array(lats)
array(longs)
library(tidyverse)
df <- data.frame(lats, longs) |>
filter(lats == "NA")
df
df
df <- data.frame(lats, longs)
df
arrayish
head(df)
arrayer <- function(string) {
processed <- read_gpx(string)
df <- as.data.frame(processed)
lats <- df$Latitude
longs <- df$Longitude
head(data.frame(lats, longs))
}
arrayer("Capilano_Canyon.gpx")
rrayer <- function(string) {
processed <- read_gpx(string)
df <- as.data.frame(processed)
lats <- df$Latitude
longs <- df$Longitude
head(lats)
arrayer <- function(string) {
processed <- read_gpx(string)
df <- as.data.frame(processed)
lats <- df$Latitude
longs <- df$Longitude
head(lats)
}
arrayer("Capilano_Canyon.gpx")
exit
arrayer <- function(string) {
processed <- read_gpx(string)
df <- as.data.frame(processed)
lats <- df$Latitude
longs <- df$Longitude
head(lats)
}
